--- pungi.orig	2013-04-23 12:10:10.399999366 -0400
+++ pungi	2013-04-23 12:10:10.398999366 -0400
@@ -20,6 +20,242 @@
 import pykickstart.version
 import subprocess
 
+# For overriding the pypungi methods
+import yum
+import os
+import re
+import shutil
+import sys
+import gzip
+import pypungi.util
+import logging
+import urlgrabber.progress
+import subprocess
+import createrepo
+import ConfigParser
+import pypungi.splittree
+
+class CLIPpungi(pypungi.Pungi):
+    def doCreateIsos(self, split=True):
+        """Create isos of the tree, optionally splitting the tree for split media."""
+
+        isolist=[]
+        anaruntime = '/usr/lib/anaconda-runtime/boot'
+        discinfofile = os.path.join(self.topdir, '.discinfo') # we use this a fair amount
+
+        pypungi.util._ensuredir(self.isodir, self.logger,
+                           force=self.config.getboolean('pungi', 'force'),
+                           clean=True) # This is risky...
+
+        # setup the base command
+        mkisofs = ['/usr/bin/mkisofs']
+        mkisofs.extend(['-f', '-v', '-U', '-J', '-R', '-T', '-m', 'repoview', '-m', 'boot.iso']) # common mkisofs flags
+
+        x86bootargs = ['-b', 'isolinux/isolinux.bin', '-c', 'isolinux/boot.cat',
+            '-no-emul-boot', '-boot-load-size', '4', '-boot-info-table']
+
+        ia64bootargs = ['-b', 'images/boot.img', '-no-emul-boot']
+
+        ppcbootargs = ['-part', '-hfs', '-r', '-l', '-sysid', 'PPC', '-no-desktop', '-allow-multidot', '-chrp-boot']
+
+        ppcbootargs.append('-map')
+        ppcbootargs.append(os.path.join(anaruntime, 'mapping'))
+
+        ppcbootargs.append('-magic')
+        ppcbootargs.append(os.path.join(anaruntime, 'magic'))
+
+        ppcbootargs.append('-hfs-bless') # must be last
+
+        sparcbootargs = ['-G', '/boot/isofs.b', '-B', '...', '-s', '/boot/silo.conf', '-sparc-label', '"sparc"']
+
+
+        # Check the size of the tree
+        # This size checking method may be bunk, accepting patches...
+        if not self.config.get('pungi', 'arch') == 'source':
+            treesize = int(subprocess.Popen(mkisofs + ['-print-size', '-quiet', self.topdir], stdout=subprocess.PIPE).communicate()[0])
+        else:
+            srcdir = os.path.join(self.config.get('pungi', 'destdir'), self.config.get('pungi', 'version'),
+                                  self.config.get('pungi', 'flavor'), 'source', 'SRPMS')
+
+            treesize = int(subprocess.Popen(mkisofs + ['-print-size', '-quiet', srcdir], stdout=subprocess.PIPE).communicate()[0])
+        # Size returned is 2KiB clusters or some such.  This translates that to MiB.
+        treesize = treesize * 2048 / 1024 / 1024
+
+        if not self.config.get('pungi', 'arch') == 'source':
+            self.doCreateMediarepo(split=False)
+
+        if treesize > 700: # we're larger than a 700meg CD
+            isoname = '%s-%s-%s-DVD.iso' % (self.config.get('pungi', 'iso_basename'), self.config.get('pungi', 'version'),
+                self.config.get('pungi', 'arch'))
+        else:
+            isoname = '%s-%s-%s.iso' % (self.config.get('pungi', 'iso_basename'), self.config.get('pungi', 'version'),
+                self.config.get('pungi', 'arch'))
+
+        isofile = os.path.join(self.isodir, isoname)
+
+        if not self.config.get('pungi', 'arch') == 'source':
+            # move the main repodata out of the way to use the split repodata
+            if os.path.isdir(os.path.join(self.config.get('pungi', 'destdir'),
+                                          'repodata-%s' % self.config.get('pungi', 'arch'))):
+                shutil.rmtree(os.path.join(self.config.get('pungi', 'destdir'),
+                                           'repodata-%s' % self.config.get('pungi', 'arch')))
+
+            shutil.move(os.path.join(self.topdir, 'repodata'), os.path.join(self.config.get('pungi', 'destdir'),
+                'repodata-%s' % self.config.get('pungi', 'arch')))
+            shutil.copytree('%s-disc1/repodata' % self.topdir, os.path.join(self.topdir, 'repodata'))
+
+        # setup the extra mkisofs args
+        extraargs = []
+
+        if self.config.get('pungi', 'arch') == 'i386' or self.config.get('pungi', 'arch') == 'x86_64':
+            extraargs.extend(x86bootargs)
+        elif self.config.get('pungi', 'arch') == 'ia64':
+            extraargs.extend(ia64bootargs)
+        elif self.config.get('pungi', 'arch') == 'ppc':
+            extraargs.extend(ppcbootargs)
+            extraargs.append(os.path.join(self.topdir, "ppc/mac"))
+        elif self.config.get('pungi', 'arch') == 'sparc':
+            extraargs.extend(sparcbootargs)
+
+        extraargs.append('-V')
+        if treesize > 700:
+            extraargs.append('%s %s %s DVD' % (self.config.get('pungi', 'name'),
+                self.config.get('pungi', 'version'), self.config.get('pungi', 'arch')))
+        else:
+            extraargs.append('%s %s %s' % (self.config.get('pungi', 'name'),
+                self.config.get('pungi', 'version'), self.config.get('pungi', 'arch')))
+
+        extraargs.extend(['-o', isofile])
+
+        if not self.config.get('pungi', 'arch') == 'source':
+            extraargs.append(self.topdir)
+        else:
+            extraargs.append(os.path.join(self.archdir, 'SRPMS'))
+
+        # run the command
+        pypungi.util._doRunCommand(mkisofs + extraargs, self.logger)
+
+        # implant md5 for mediacheck on all but source arches
+        if not self.config.get('pungi', 'arch') == 'source':
+            pypungi.util._doRunCommand(['/usr/bin/implantisomd5', isofile], self.logger)
+
+        # shove the checksum into a file
+        csumfile = os.path.join(self.isodir, '%s-%s-%s-CHECKSUM' % (
+                                self.config.get('pungi', 'iso_basename'),
+                                self.config.get('pungi', 'version'),
+                                self.config.get('pungi', 'arch')))
+        # Write a line about what checksums are used.
+        # sha256sum is magic...
+        file = open(csumfile, 'w')
+        file.write('# The image checksum(s) are generated with sha256sum.\n')
+        file.close()
+        self._doIsoChecksum(isofile, csumfile)
+
+        # return the .discinfo file
+        if not self.config.get('pungi', 'arch') == 'source':
+            shutil.rmtree(os.path.join(self.topdir, 'repodata')) # remove our copied repodata
+            shutil.move(os.path.join(self.config.get('pungi', 'destdir'),
+                'repodata-%s' % self.config.get('pungi', 'arch')), os.path.join(self.topdir, 'repodata'))
+
+        # Move the unified disk out
+        if not self.config.get('pungi', 'arch') == 'source':
+            shutil.rmtree(os.path.join(self.workdir, 'os-unified'), ignore_errors=True)
+            shutil.move('%s-disc1' % self.topdir, os.path.join(self.workdir, 'os-unified'))
+
+        # Write out a line describing the media
+        self.writeinfo('media: %s' % self.mkrelative(isofile))
+
+
+        # See if our tree size is big enough and we want to make split media
+        if treesize > 700 and split:
+            discs = 0
+            if self.config.get('pungi', 'arch') == 'source':
+                self.doSplitSRPMs()
+                dirs = os.listdir(self.archdir)
+                for dir in dirs:
+                    if dir.startswith('%s-disc' % os.path.basename(self.topdir)):
+                        discs += 1
+                # Set the number of discs for future use
+                self.config.set('pungi', 'discs', str(discs))
+            else:
+                self.doPackageorder()
+                self.doSplittree()
+                # Figure out how many discs splittree made for us
+                dirs = os.listdir(self.archdir)
+                for dir in dirs:
+                    if dir.startswith('%s-disc' % os.path.basename(self.topdir)):
+                        discs += 1
+                # Set the number of discs for future use
+                self.config.set('pungi', 'discs', str(discs))
+                self.doCreateMediarepo(split=True)
+            for disc in range(1, discs + 1): # cycle through the CD isos
+                isoname = '%s-%s-%s-disc%s.iso' % (self.config.get('pungi', 'iso_basename'), self.config.get('pungi', 'version'),
+                    self.config.get('pungi', 'arch'), disc)
+                isofile = os.path.join(self.isodir, isoname)
+
+                extraargs = []
+
+                if disc == 1: # if this is the first disc, we want to set boot flags
+                    if self.config.get('pungi', 'arch') == 'i386' or self.config.get('pungi', 'arch') == 'x86_64':
+                        extraargs.extend(x86bootargs)
+                    elif self.config.get('pungi', 'arch') == 'ia64':
+                        extraargs.extend(ia64bootargs)
+                    elif self.config.get('pungi', 'arch') == 'ppc':
+                        extraargs.extend(ppcbootargs)
+                        extraargs.append(os.path.join('%s-disc%s' % (self.topdir, disc), "ppc/mac"))
+                    elif self.config.get('pungi', 'arch') == 'sparc':
+                        extraargs.extend(sparcbootargs)
+
+                extraargs.append('-V')
+                extraargs.append('%s %s %s Disc %s' % (self.config.get('pungi', 'name'),
+                    self.config.get('pungi', 'version'), self.config.get('pungi', 'arch'), disc))
+
+                extraargs.append('-o')
+                extraargs.append(isofile)
+
+                extraargs.append(os.path.join('%s-disc%s' % (self.topdir, disc)))
+
+                # run the command
+                pypungi.util._doRunCommand(mkisofs + extraargs, self.logger)
+
+                # implant md5 for mediacheck on all but source arches
+                if not self.config.get('pungi', 'arch') == 'source':
+                    pypungi.util._doRunCommand(['/usr/bin/implantisomd5', isofile], self.logger)
+
+                # shove the checksum into a file
+                self._doIsoChecksum(isofile, csumfile)
+
+                # keep track of the CD images we've written
+                isolist.append(self.mkrelative(isofile))
+
+            # Write out a line describing the CD set
+            self.writeinfo('mediaset: %s' % ' '.join(isolist))
+
+        # Now link the boot iso
+        if not self.config.get('pungi', 'arch') == 'source' and \
+        os.path.exists(os.path.join(self.topdir, 'images', 'boot.iso')):
+            isoname = '%s-%s-%s-netinst.iso' % (self.config.get('pungi', 'iso_basename'),
+                self.config.get('pungi', 'version'), self.config.get('pungi', 'arch'))
+            isofile = os.path.join(self.isodir, isoname)
+
+            # link the boot iso to the iso dir
+            pypungi.util._link(os.path.join(self.topdir, 'images', 'boot.iso'), isofile, self.logger)
+
+            # shove the checksum into a file
+            self._doIsoChecksum(isofile, csumfile)
+
+        # Do some clean up
+        dirs = os.listdir(self.archdir)
+
+        for directory in dirs:
+            if directory.startswith('os-disc') or directory.startswith('SRPMS-disc'):
+                if os.path.exists(os.path.join(self.workdir, directory)):
+                    shutil.rmtree(os.path.join(self.workdir, directory))
+                shutil.move(os.path.join(self.archdir, directory), os.path.join(self.workdir, directory))
+
+        self.logger.info("CreateIsos is done.")
+
+
 def main():
 
     config = pypungi.config.Config()
@@ -79,7 +315,7 @@
         config.set('pungi', 'debuginfo', "False")
 
     # Actually do work.
-    mypungi = pypungi.Pungi(config, ksparser)
+    mypungi = CLIPpungi(config, ksparser)
 
     if not opts.sourceisos:
         if opts.do_all or opts.do_gather or opts.do_buildinstall:
