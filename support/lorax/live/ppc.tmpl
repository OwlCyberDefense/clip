<%page args="kernels, runtime_img, basearch, libdir, inroot, outroot, product, isolabel"/>
<%
configdir="tmp/config_files/ppc"
BOOTDIR="ppc"
GRUBDIR="boot/grub"
LIVEDIR="LiveOS"
MACDIR=BOOTDIR+"/mac"
NETBOOTDIR="images/netboot"
LORAXDIR="usr/share/lorax/"

WRAPPER="usr/sbin/wrapper"
WRAPPER_DATA="usr/"+libdir+"/kernel-wrapper"

prepboot = ""

## NOTE: yaboot freaks out and stops parsing its config if it sees a '\',
## so we can't use the udev escape sequences in the root arg.
## Instead we'll just replace any non-ASCII characters in the isolabel
## with '_', which means we won't need any udev escapes.
isolabel = ''.join(ch if ch.isalnum() else '_' for ch in isolabel)
%>

mkdir ${LIVEDIR}
install ${runtime_img} ${LIVEDIR}/squashfs.img
treeinfo stage2 mainimage ${LIVEDIR}/squashfs.img

## install bootloaders.
## NOTE: there's two different bootloader setups here:
##   ppc/chrp: for normal PPC systems. needs 'addnote' run on yaboot.
##             uses /etc/yaboot.conf, as is the default.
##   ppc/mac: for PowerMacs. no 'addnote' (it breaks some Macs!)
##            ofboot.b picks one of /ppc/ppc{32,64}/yaboot.conf for yaboot,
##            thus automatically booting the correct kernel for the machine.
mkdir ${BOOTDIR}
## boot stuff for normal (CHRP/PREP) PPC systems
install ${configdir}/bootinfo.txt ${BOOTDIR}

mkdir ${GRUBDIR}/powerpc-ieee1275
runcmd grub2-mkimage -O powerpc-ieee1275 -d  /usr/lib/grub/powerpc-ieee1275 -p '()/boot/grub' \
-o ${outroot}/${GRUBDIR}/powerpc-ieee1275/core.elf iso9660 ext2 ofnet net tftp http
install /usr/lib/grub/powerpc-ieee1275/*.mod ${GRUBDIR}/powerpc-ieee1275
install /usr/lib/grub/powerpc-ieee1275/*.lst ${GRUBDIR}/powerpc-ieee1275


install ${configdir}/grub.cfg.in     ${GRUBDIR}/grub.cfg
replace @PRODUCT@ '${product.name}'  ${GRUBDIR}/grub.cfg
replace @VERSION@ ${product.version} ${GRUBDIR}/grub.cfg
replace @ROOT@ 'root=live:CDLABEL=${isolabel|udev}' ${GRUBDIR}/grub.cfg

## copy mapping and magic files needed for isos
install ${configdir}/mapping ${BOOTDIR}
install ${configdir}/magic ${BOOTDIR}

## NOTE: PPC is kind of funky. There's three possible "arch" setups here:
## ppc, ppc64, ppc64le and 'hybrid' (ppc userspace, both ppc & ppc64 kernels).

## Install kernel and bootloader config (in separate places for each arch)
%for kernel in kernels:
    <%
      bits = 64 if kernel.arch in ("ppc64", "ppc64le") else 32
      ## separate dirs/images for each arch
      KERNELDIR=BOOTDIR+"/ppc%s" % bits
      NETIMG=NETBOOTDIR+"/ppc%s.img" % bits
    %>
    ## install kernel
    mkdir ${KERNELDIR} ${NETBOOTDIR}
    installkernel images-${kernel.arch} ${kernel.path} ${KERNELDIR}/vmlinuz
    installinitrd images-${kernel.arch} ${kernel.initrd.path} ${KERNELDIR}/initrd.img

    ## kernel-wrapper magic that makes the netboot combined ppc{32,64}.img
    runcmd ${inroot}/${WRAPPER} -p of \
           -D ${inroot}/${WRAPPER_DATA} \
           -i ${outroot}/${KERNELDIR}/initrd.img \
              ${outroot}/${KERNELDIR}/vmlinuz \
           -o ${outroot}/${NETIMG}
    treeinfo images-${kernel.arch} zimage ${NETIMG}
    ## PReP is 32-bit only
    %if bits == 32:
        ## Yes, this is supposed to be a relative path
        <% prepboot="-prep-boot " + NETIMG %>
    %endif
%endfor

# Create optional product.img and updates.img
<% imggraft=""; images=["product", "updates"] %>
%for img in images:
    %if exists("%s/%s/" % (LORAXDIR, img)):
        installimg ${LORAXDIR}/${img}/ images/${img}.img
        <% imggraft += " images/{0}.img={1}/images/{0}.img".format(img, outroot) %>
    %endif
%endfor

## make boot.iso
runcmd mkisofs -o ${outroot}/images/boot.iso -chrp-boot -U \
        ${prepboot} -part -hfs -T -r -l -J \
        -A "${product.name} ${product.version}" -sysid PPC -V '${isolabel}' \
        -volset "${product.version}" -volset-size 1 -volset-seqno 1 \
        -hfs-volid ${product.version} -hfs-bless ${outroot}/${MACDIR} \
        -map ${inroot}/${configdir}/mapping \
        -no-desktop -allow-multidot -graft-points \
        ${BOOTDIR}=${outroot}/${BOOTDIR} \
        ${GRUBDIR}=${outroot}/${GRUBDIR} \
        ${NETBOOTDIR}=${outroot}/${NETBOOTDIR} \
        ${LIVEDIR}=${outroot}/${LIVEDIR} ${imggraft}

%for kernel in kernels:
    treeinfo images-${kernel.arch} boot.iso images/boot.iso
%endfor
